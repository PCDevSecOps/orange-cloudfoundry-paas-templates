
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: secret
    name: ldap-secret
    namespace: openldap
    data:
    - name: env.startup.yaml
      value: |
        LDAP_ORGANISATION: Orange
        LDAP_DOMAIN: orange.com
        LDAP_BASE_DN: dc=orange,dc=com

        LDAP_ADMIN_PASSWORD: ((/secrets/ldap_root_password))
        LDAP_CONFIG_PASSWORD: ((/secrets/ldap_root_password))

        LDAP_READONLY_USER: false
        LDAP_READONLY_USER_USERNAME: readonly # credential_leak_validated
        LDAP_READONLY_USER_PASSWORD: readonly # credential_leak_validated

        LDAP_RFC2307BIS_SCHEMA: false

        # Backend
        LDAP_BACKEND: mdb

        # Tls
        LDAP_TLS: false
        LDAP_TLS_CRT_FILENAME: ldap.crt
        LDAP_TLS_KEY_FILENAME: ldap.key
        LDAP_TLS_DH_PARAM_FILENAME: dhparam.pem
        LDAP_TLS_CA_CRT_FILENAME: ca.crt

        LDAP_TLS_ENFORCE: false
        LDAP_TLS_CIPHER_SUITE: SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC
        LDAP_TLS_VERIFY_CLIENT: demand

        # Replication
        LDAP_REPLICATION: false
        # variables $LDAP_BASE_DN, $LDAP_ADMIN_PASSWORD, $LDAP_CONFIG_PASSWORD
        # are automaticaly replaced at run time

        # if you want to add replication to an existing ldap
        # adapt LDAP_REPLICATION_CONFIG_SYNCPROV and LDAP_REPLICATION_DB_SYNCPROV to your configuration
        # avoid using $LDAP_BASE_DN, $LDAP_ADMIN_PASSWORD and $LDAP_CONFIG_PASSWORD variables
        LDAP_REPLICATION_CONFIG_SYNCPROV: binddn="cn=admin,cn=config" bindmethod=simple credentials=$LDAP_CONFIG_PASSWORD searchbase="cn=config" type=refreshAndPersist retry="60 +" timeout=1 starttls=critical
        LDAP_REPLICATION_DB_SYNCPROV: binddn="cn=admin,$LDAP_BASE_DN" bindmethod=simple credentials=$LDAP_ADMIN_PASSWORD searchbase="$LDAP_BASE_DN" type=refreshAndPersist interval=00:00:00:10 retry="60 +" timeout=1 starttls=critical
        LDAP_REPLICATION_HOSTS:
          - ldap://ldap.example.org # The order must be the same on all ldap servers
          - ldap://ldap2.example.org


        # Do not change the ldap config
        # - If set to true with an existing database, config will remain unchanged. Image tls and replication config will not be run.
        #   The container can be started with LDAP_ADMIN_PASSWORD and LDAP_CONFIG_PASSWORD empty or filled with fake data.
        # - If set to true when bootstrapping a new database, bootstap ldif and schema will not be added and tls and replication config will not be run.
        KEEP_EXISTING_CONFIG: false

        # Remove config after setup
        LDAP_REMOVE_CONFIG_AFTER_SETUP: true

        # ssl-helper environment variables prefix
        LDAP_SSL_HELPER_PREFIX: ldap # ssl-helper first search config from LDAP_SSL_HELPER_* variables, before SSL_HELPER_* variables.

    - name: 01-custom-ou.ldif
      value: |

          #--- Create root dn: dc=orange,dc=com
          dn: dc=orange,dc=com
          objectclass: dcObject
          objectclass: top
          objectclass: organization
          dc: orange
          o: com

          #--- Create groups: ou=groups,dc=orange,dc=com
          dn: ou=groups,dc=orange,dc=com
          objectclass: organizationalUnit
          objectclass: top
          ou: groups

          #--- Create paas-groups: ou=paas-groups,ou=groups,dc=orange,dc=com
          dn: ou=paas-groups,ou=groups,dc=orange,dc=com
          objectclass: organizationalUnit
          objectclass: top
          ou: paas-groups

          #--- Create users: ou=users,dc=orange,dc=com
          dn: ou=users,dc=orange,dc=com
          objectclass: organizationalUnit
          objectclass: top
          ou: users

          dn: olcDatabase=mdb,cn=config
          objectClass: olcDatabaseConfig
          objectClass: olcMdbConfig
          olcDatabase: mdb
          olcSuffix: dc=orange,dc=com
          olcRootDN: cn=manager,dc=orange,dc=com
          olcRootPW: ((/secrets/ldap_root_password))


          #--- Create admin group with scopes
          dn: cn=admin,ou=paas-groups,ou=groups,dc=orange,dc=com
          objectclass: groupOfUniqueNames
          objectclass: top
          cn: admin


          description: cloud_controller.admin,cloud_controller.write,cloud_controller.read,cloud_controller_service_permissions.read,
            scim.write,scim.read,scim.me,scim.userids,uaa.admin,uaa.user,openid,oauth.approvals,approvals.me,password.write,
            admin_ui.admin,credhub.write,credhub.read,bosh.admin,bosh.read
          uniquemember: uid=concourse,ou=users,dc=orange,dc=com

          #--- Create auditor group with scopes
          dn: cn=auditor,ou=paas-groups,ou=groups,dc=orange,dc=com
          objectclass: groupOfUniqueNames
          objectclass: top
          cn: auditor
          description: cloud_controller.read,cloud_controller_service_permissions.read,
            scim.me,scim.userids,uaa.user,openid,oauth.approvals,approvals.me,bosh.read
          uniquemember: uid=concourse,ou=users,dc=orange,dc=com


    - name: env.yaml
      value: |
        LDAP_LOG_LEVEL: 256


- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: secret
    name: openldap-tls
    namespace: openldap
    secret_type: kubernetes.io/tls
    data:
    - name: tls.crt
      value: ((/secrets/certs/ops.certificate))
    - name: tls.key
      value: ((/secrets/certs/ops.private_key))



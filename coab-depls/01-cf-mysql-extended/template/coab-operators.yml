---
#replace deployment name
- type: replace
  path: /name
  value: ((deployment_name))

#errand leveraging scripting release (errand script) to reset shield v8 password
- type: replace
  path: /instance_groups/name=broker/jobs/-
  value:
    name: errand-scripting
    release: generic-scripting
    lifecycle: errand
    properties:
      scripting:
        errand-script: |
          #--- Initialize context
          > /var/vcap/sys/log/scripting/errand-scripting.stderr.log
          > /var/vcap/sys/log/scripting/errand-scripting.stdout.log

          echo "- Begin errand-scripting in order to reset shield admin password to failsafe password"

          #deploy with failsafe password (done by manifest)

          #delete admin user with SHIELD-CLI
          echo "delete admin user"
          /var/vcap/packages/shield/bin/shield api -k https://((shield-alias-prefix))((deployment_name))((shield-alias-suffix)) ((shield-core))
          set +e
          /var/vcap/packages/shield/bin/shield --core ((shield-core)) login -u admin -p ((failsafe-password))
          if [ $? -eq 1 ]; then
            /var/vcap/packages/shield/bin/shield --core ((shield-core)) login -u admin -p shield
          fi
          set -e
          /var/vcap/packages/shield/bin/shield --core ((shield-core)) delete-user admin -y

          #stop shield core
          echo "stop shield core and wait for 10 seconds"
          sudo monit stop shieldd;sudo sleep 10

          #start shield core
          echo "start shield core and wait for 10 seconds"
          sudo monit start shieldd;sudo sleep 10

          #unlock shield
          echo "unlock shield"
          /var/vcap/packages/shield/bin/shield api -k https://((shield-alias-prefix))((deployment_name))((shield-alias-suffix)) ((shield-core))
          set +e
          /var/vcap/packages/shield/bin/shield --core ((shield-core)) unlock --master ((failsafe-password))
          if [ $? -eq 1 ]; then
            /var/vcap/packages/shield/bin/shield --core ((shield-core)) unlock --master shield
          fi
          set -e

          echo "- End errand-scripting in order to reset shield admin password to failsafe password"

# add job section
- type: replace
  path: /instance_groups/name=broker/jobs/-
  value:
    name: cron
    release: cron
    properties:
      cron:
        entries:
          - script:
              name: prometheus.sh
              contents: |

                #!/bin/bash
                dt=$(date +"%d/%m/%Y à %Hh%M")
                echo "begin $dt"

                echo "- Start metrics generation "

                /var/vcap/packages/shield/bin/shield api -k https://((shield-alias-prefix))((deployment_name))((shield-alias-suffix)) ((shield-core))
                /var/vcap/packages/shield/bin/shield --core ((shield-core)) login -u admin -p ((failsafe-password))

                #prepare files
                >/tmp/metrics
                >/tmp/paused
                >/tmp/job_status
                >/tmp/header_paused
                echo "# HELP shield_job_paused Shield Job pause status (1 for paused, 0 for unpaused)." >> /tmp/header_paused
                echo "# TYPE shield_job_paused gauge" >> /tmp/header_paused
                >/tmp/header_status
                echo "# HELP shield_job_status Shield Job status (0 for unknow, 1 for pending, 2 for running, 3 for canceled, 4 for failed, 5 for done)." >>/tmp/header_status
                echo "# TYPE shield_job_status gauge" >>/tmp/header_status

                #use SHIELD CLI in order to get jobs information in order to populate files
                /var/vcap/packages/shield/bin/shield --core ((shield-core)) --tenant ((deployment_name)) jobs | grep -oE '^[0-9a-z]{8,8}' > /tmp/jobs.lst
                for job in $(cat /tmp/jobs.lst); do
                /var/vcap/packages/shield/bin/shield --core ((shield-core)) --tenant ((deployment_name)) job ${job} > /tmp/job.lst
                status=$(cat /tmp/job.lst | grep -oE '[healthy]{7,7}|[failed]{6,6}|[paused]{6,6}')
                echo ${status}
                name=$(cat /tmp/job.lst | grep 'Data System')
                n=$(echo ${name} | cut -d ' ' -f 3)
                echo ${n}
                #shield_job_status{backend_name="(none)",environment="fe-prod",job_name="bosh_coab_backup"} 5
                if [ "${status}" = "paused" ] ; then
                echo "shield_job_paused{backend_name=\"(none)\",environment=\"((/secrets/site))\",job_name=\"${n}\"} 1" >> /tmp/paused
                elif [ "${status}" = "healthy" ] ; then
                echo "shield_job_paused{backend_name=\"(none)\",environment=\"((/secrets/site))\",job_name=\"${n}\"} 0" >> /tmp/paused
                echo "shield_job_status{backend_name=\"(none)\",environment=\"((/secrets/site))\",job_name=\"${n}\"} 5" >> /tmp/job_status
                else #failed
                echo "shield_job_paused{backend_name=\"(none)\",environment=\"((/secrets/site))\",job_name=\"${n}\"} 0" >> /tmp/paused
                echo "shield_job_status{backend_name=\"(none)\",environment=\"((/secrets/site))\",job_name=\"${n}\"} 4" >> /tmp/job_status
                fi
                done

                #concat all files together
                cat /tmp/header_paused >> /tmp/metrics
                cat /tmp/paused >> /tmp/metrics
                cat /tmp/header_status >> /tmp/metrics
                cat /tmp/job_status >> /tmp/metrics

                #display metrics file
                cat /tmp/metrics

                echo "- End metrics generation "

                dt=$(date +"%d/%m/%Y à %Hh%M")
                echo "end $dt"

            log: /var/vcap/sys/log/cron/prometheus.log
            lock: /var/vcap/sys/run/cron/prometheus.lock
            day: '*'
            hour: '*'
            minute: '0'
            month: '*'
            user: root
            wday: '*'
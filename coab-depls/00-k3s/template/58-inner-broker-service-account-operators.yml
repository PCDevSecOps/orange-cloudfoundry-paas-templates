# create namespace
- type: replace
  path: /addons/name=10-add-servers/jobs/name=action/properties/actions/-
  value:
    type: namespace
    name: k3s-cluster-((instance_id))

#this is required so we can run kubectl from a pod to create osb secrets

- type: replace
  path: /addons/name=10-add-servers/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "create_sa"
    cmd: "apply"
    options: ""
    content:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: k3s-cluster-((instance_id))
        namespace: k3s-cluster-((instance_id))


- type: replace
  path: /addons/name=10-add-servers/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "create_role_k3s-cluster-((instance_id))"
    cmd: "apply"
    options: ""
    content:
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: k3s-cluster-((instance_id))
        namespace: k3s-cluster-((instance_id))
      rules:
      - apiGroups:
        - ""
        resources:
        - secrets
        verbs:
        - create
        - update
        - patch
        - get
        - list
        - watch

- type: replace
  path: /addons/name=10-add-servers/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "create_role_binding_k3s-cluster-((instance_id))"
    cmd: "apply"
    options: ""
    content:
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1beta1
      metadata:
        name: k3s-cluster-((instance_id))
        namespace: k3s-cluster-((instance_id))
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: k3s-cluster-((instance_id))
      subjects:
      - kind: ServiceAccount
        name: k3s-cluster-((instance_id))
        namespace: k3s-cluster-((instance_id))

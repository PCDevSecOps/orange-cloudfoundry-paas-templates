---
applications:
- name: redis-sec-group-broker-filter
  instances: 2
#  instances: 1 # Transiently keep a single instance to ease troubleshooting
  path: service-broker-filter-securitygroups.jar
  memory: 1G
  stack: cflinuxfs3
  routes:
    - route: (( concat meta.redis-sec-group-broker-filter.host "." meta.redis-sec-group-broker-filter.domain))
  timeout: 180
  buildpack: cached-java-buildpack

  env:
    # Where to send received traffic: URL to the target broker.
    BROKER_FILTER_URL: (( concat "https://redis-broker." secrets.cloudfoundry.system_domain ))
    # basic auth credentials to use while sending traffic to the target broker
    BROKER_FILTER_USER: admin
    BROKER_FILTER_PASSWORD: (( grab secrets.cloudfoundry.service_brokers.p-redis.password ))

    # Optionally restrict the IPs/ports in created security groups to a set of trusted destinations.
    # In case the target broker gets compromised and returns unrelated IPs in credentials, the binding response
    # will error, preventing unathorized accesses to unrelated destinations.
    # Trusted destinations is expressed as either a single IP address (10.0.11.0), an IP address range (e.g. 10.0.11.1-10.0.11.2),
    # or a CIDR block (e.g. 10.0.11.0/24).
    # If empty or unspecified, any IP adress returned from the binding response will be granted access in
    # created security groups
    #BROKER_FILTER_TRUSTED_DESTINATION_HOSTS= (( grab secrets.redis-sec-group-broker-filter.trusted_destination_hosts ))
    # An optional trusted destination ports. Can be a single port, multiple comma-separated ports, or a single range of ports.
    # Examples: 3306 3306,3307 3300-3400
    # If empty or unspecified, any port returned from the binding response
    # will be granted access in created security groups
    #BROKER_FILTER_TRUSTED_DESTINATION_PORTS= (( grab secrets.redis-sec-group-broker-filter.trusted_destination_ports ))

    # CloudFoundry CC api host
    CLOUDFOUNDRY_HOST: (( grab secrets.redis-sec-group-broker-filter.cf_host ))
    # CloudFoudry user with Org admin privileges on orgs where services will be bound
    CLOUDFOUNDRY_USER: (( grab secrets.redis-sec-group-broker-filter.cf_user ))
    # CloudFoudry user password
    CLOUDFOUNDRY_PASSWORD: (( grab secrets.redis-sec-group-broker-filter.cf_password ))

    JBP_CONFIG_CONTAINER_CERTIFICATE_TRUST_STORE: '{enabled: true}'

    # Using java8 until cf-java-client supports more recent java version
#    JBP_CONFIG_OPEN_JDK_JRE: '{ jre: { version: 1.8.+ }}' #EOL in 2026+ in adoptJdk

    #force openjdk 14 where version was tested in circle
    #See https://github.com/cloudfoundry/java-buildpack/#configuration-and-extension
    # and https://github.com/cloudfoundry/cf-java-client/issues/1067
    JBP_CONFIG_OPEN_JDK_JRE: '{ jre: { version: 14.+ }}'

    JAVA_OPTS: (( grab meta.redis-sec-group-broker-filter.java_opts ))

    # transiently set debug level
    logging.level.com.orange.cloud.servicebroker.filter.core: debug
    logging.level.com.orange.cloud.servicebroker.filter.core.service: debug
    logging.level.com.orange.cloud.servicebroker.filter.core.filters: debug
    logging.level.com.orange.cloud.servicebroker.filter.securitygroups.filter: debug #creation/removal of security groups


    logging.level.org.springframework.cloud.servicebroker: debug # for incoming OSB API traces
    logging.level.cloudfoundry-client: info
    logging.level.cloudfoundry-client.request: debug
    logging.level.cloudfoundry-client.response: debug
#    logging.level.cloudfoundry-client.wire: trace
    logging.level.cloudfoundry-client.wire: error
    logging.level.cloudfoundry-client.operations: debug
    logging.level.org.springframework.security: info

    # Note that sec-group-filter has actuator enabled to dynamically configure log levels,
    # or trigger and fetch thread threaddump remotely
    # See associated documentation at https://docs.spring.io/spring-boot/docs/current/actuator-api/html/

    #Spring boot debug mode. Note: Also available in actuator conditions endpoint if application managed to start.
#    DEBUG: true
    DEBUG: false

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "define-config-IngressRoute"
    cmd: "apply"
    options: ""
    content:
      apiVersion: config.gatekeeper.sh/v1alpha1
      kind: Config
      metadata:
        name: config
        namespace: "gatekeeper-system"
      spec:
        sync:
          syncOnly:
          - group: "traefik.containo.us"
            version: "v1alpha1"
            kind: "IngressRoute"

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "define-httpsonly"
    cmd: "apply"
    options: ""
    content:
      apiVersion: templates.gatekeeper.sh/v1beta1
      kind: ConstraintTemplate
      metadata:
        name: k8shttpsonly
      spec:
        crd:
          spec:
            names:
              kind: K8sHttpsOnly
        targets:
        - target: admission.k8s.gatekeeper.sh
          rego: |
            package k8shttpsonly
            violation[{"msg": msg}] {
              input.review.kind.kind == "IngressRoute"
              re_match("^(traefik.containo.us)$", input.review.kind.group)
              ingress := input.review.object
              not https_complete(ingress)
              msg := sprintf("IngressRoute should be https. tls configuration and allow-http=false annotation are required for %v", [ingress.metadata.name])
            }
            https_complete(ingress) = true {
              ingress.spec["tls"]
              count(ingress.spec.tls) > 0
            }

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "define-K8sHttpsOnly-instance"
    cmd: "apply"
    options: ""
    content:
      apiVersion: constraints.gatekeeper.sh/v1beta1
      kind: K8sHttpsOnly
      metadata:
        name: ingress-https-only
      spec:
        match:
          kinds:
          - apiGroups: ["traefik.containo.us"]
            kinds: ["IngressRoute"]
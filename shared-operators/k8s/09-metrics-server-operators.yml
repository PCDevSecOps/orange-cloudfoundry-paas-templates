- type: replace
  path: /variables?/-
  value:
    name: tls-metrics-server
    type: certificate
    options:
      ca: tls-ca
      alternative_names:
      - metrics-server.kube-system.svc
      common_name: metrics-server

- type: replace
  path: /instance_groups/name=cfcr-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: secret
    name:  metrics-server-certs
    namespace: kube-system
    data:
    - name: client-ca.crt
      value: ((tls-metrics-server.ca))
    - name: client.crt
      value: ((tls-metrics-server.certificate))
    - name: client.key
      value: ((tls-metrics-server.private_key))
    - name: requestheader-client-ca.crt
      value: ((tls-ca.ca))




- type: replace
  path: /instance_groups/name=cfcr-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: helm_chart
    name: metrics-server
    chart: stable/metrics-server
    namespace: kube-system
    version: 2.9.0
    values_file_content:
      rbac:
        # Specifies whether RBAC resources should be created
        create: true
        pspEnabled: false

      serviceAccount:
        # Specifies whether a ServiceAccount should be created
        create: true
        # The name of the ServiceAccount to use.
        # If not set and create is true, a name is generated using the fullname template
        name:

      apiService:
        # Specifies if the v1beta1.metrics.k8s.io API service should be created.
        #
        # You typically want this enabled! If you disable API service creation you have to
        # manage it outside of this chart for e.g horizontal pod autoscaling to
        # work with this release.
        create: true

      hostNetwork:
        # Specifies if metrics-server should be started in hostNetwork mode.
        #
        # You would require this enabled if you use alternate overlay networking for pods and
        # API server unable to communicate with metrics-server. As an example, this is required
        # if you use Weave network on EKS
        enabled: true

      image:
        #repository: gcr.io/google_containers/metrics-server-amd64
        repository: k8s.gcr.io/metrics-server-amd64
        tag: v0.3.6
        pullPolicy: IfNotPresent

      imagePullSecrets: []
      # - registrySecretName

      args:
      - /metrics-server
      - --kubelet-preferred-address-types=InternalIP
      - --kubelet-insecure-tls
      - --client-ca-file=/var/run/kubernetes/client-ca.crt
      - --requestheader-client-ca-file=/var/run/kubernetes/requestheader-client-ca.crt
      - --tls-cert-file=/var/run/kubernetes/client.crt
      - --tls-private-key-file=/var/run/kubernetes/client.key
      # enable this if you have self-signed certificates, see: https://github.com/kubernetes-incubator/metrics-server
      #  - --kubelet-insecure-tls

      resources: {}

      nodeSelector: {}

      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"

      affinity: {}

      replicas: 1

      extraContainers: []

      podAnnotations: {}
      #  The following annotations guarantee scheduling for critical add-on pods.
      #    See more at: https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
      #  scheduler.alpha.kubernetes.io/critical-pod: ''
      #  priorityClassName: system-node-critical

      extraVolumeMounts:
      - name: metrics-server-secrets
        mountPath: /var/run/kubernetes
      #  - name: secrets
      #    mountPath: /etc/kubernetes/secrets
      #    readOnly: true

      extraVolumes:
      - name: metrics-server-secrets
        secret:
          secretName: metrics-server-certs

      livenessProbe:
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20

      readinessProbe:
        httpGet:
          path: /healthz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20

      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop: ["all"]
        readOnlyRootFilesystem: true
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001

      service:
        annotations: {}
        labels: {}
        #  Add these labels to have metrics-server show up in `kubectl cluster-info`
        #  kubernetes.io/cluster-service: "true"
        #  kubernetes.io/name: "Metrics-server"
        port: 443
        type: ClusterIP

      podDisruptionBudget:
        # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
        enabled: false
        minAvailable:
        maxUnavailable:
- type: replace
  path: /variables?/-
  value:
    name: tls-metrics-server
    type: certificate
    options:
      ca: tls-ca
      alternative_names:
      - metrics-server.kube-system.svc
      common_name: metrics-server

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: secret
    name:  metrics-server-certs
    namespace: kube-system
    data:
    - name: client-ca.crt
      value: ((tls-metrics-server.ca))
    - name: client.crt
      value: ((tls-metrics-server.certificate))
    - name: client.key
      value: ((tls-metrics-server.private_key))
    - name: requestheader-client-ca.crt
      value: ((tls-ca.ca))
    - name: kubelet-ca.crt
      value: ((tls-ca.certificate))


- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "clusterrole-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: system:aggregated-metrics-reader
        labels:
          rbac.authorization.k8s.io/aggregate-to-view: "true"
          rbac.authorization.k8s.io/aggregate-to-edit: "true"
          rbac.authorization.k8s.io/aggregate-to-admin: "true"
      rules:
      - apiGroups: ["metrics.k8s.io"]
        resources: ["pods", "nodes"]
        verbs: ["get", "list", "watch"]

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "clusterrolebinding-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: metrics-server:system:auth-delegator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:auth-delegator
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "rolebinding-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: metrics-server-auth-reader
        namespace: kube-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: extension-apiserver-authentication-reader
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "api-service-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: apiregistration.k8s.io/v1beta1
      kind: APIService
      metadata:
        name: v1beta1.metrics.k8s.io
      spec:
        service:
          name: metrics-server
          namespace: kube-system
        group: metrics.k8s.io
        version: v1beta1
        insecureSkipTLSVerify: true
        groupPriorityMinimum: 100
        versionPriority: 100

- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "sa-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: metrics-server
        namespace: kube-system
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "deployment-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: metrics-server
        namespace: kube-system
        labels:
          k8s-app: metrics-server
      spec:
        selector:
          matchLabels:
            k8s-app: metrics-server
        template:
          metadata:
            name: metrics-server
            labels:
              k8s-app: metrics-server
          spec:
            serviceAccountName: metrics-server
            volumes:
            # mount in tmp so we can safely use from-scratch images and/or read-only containers
            - name: tmp-dir
              emptyDir: {}
            - name: metrics-server-secrets
              secret:
                secretName: metrics-server-certs
            containers:
            - name: metrics-server
              image: metrics-server/metrics-server:v0.3.7
              imagePullPolicy: IfNotPresent
              args:
              - /metrics-server
              - --tls-cert-file=/var/run/kubernetes/client.crt
              - --tls-private-key-file=/var/run/kubernetes/client.key
              - --secure-port=4443
              - --kubelet-certificate-authority=/var/run/kubernetes/kubelet-ca.crt
              - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
              - --requestheader-client-ca-file=/var/run/kubernetes/requestheader-client-ca.crt
              ports:
              - name: main-port
                containerPort: 4443
                protocol: TCP
              securityContext:
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 1000
              volumeMounts:
              - name: tmp-dir
                mountPath: /tmp
              - name: metrics-server-secrets
                mountPath: /var/run/kubernetes

            nodeSelector:
              kubernetes.io/os: linux
              kubernetes.io/arch: "amd64"
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "service-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: v1
      kind: Service
      metadata:
        name: metrics-server
        namespace: kube-system
        labels:
          kubernetes.io/name: "Metrics-server"
          kubernetes.io/cluster-service: "true"
      spec:
        selector:
          k8s-app: metrics-server
        ports:
        - port: 443
          protocol: TCP
          targetPort: main-port
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "clusterrole-system-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: system:metrics-server
      rules:
      - apiGroups:
        - ""
        resources:
        - pods
        - nodes
        - nodes/stats
        - namespaces
        - configmaps
        verbs:
        - get
        - list
        - watch
- type: replace
  path: /instance_groups/name=k8s-helm-addons/jobs/name=action/properties/actions/-
  value:
    type: kubectl
    name: "clusterrolebinding-system-metrics-server"
    cmd: "apply"
    options: ""
    content:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:metrics-server
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:metrics-server
      subjects:
      - kind: ServiceAccount
        name: metrics-server
        namespace: kube-system